import sys, os
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QListWidget, QListWidgetItem, QPushButton, QInputDialog, QLineEdit, QLabel, QMessageBox, QVBoxLayout
from PyQt5.QtCore import Qt, QUrl

#Inporting Required Librarires
import pefile
import os
import array
import math
import pickle
import joblib
import sys
import argparse

#Libraries for Notification System
import win10toast
from win10toast import ToastNotifier

#Entropy Function - To detect the repetitive patterns that are near to each other in the sequence which would indicate a deviation from the assumption of randomness
def get_entropy(data):
    if len(data) == 0:
        return 0.0
    occurences = array.array('L', [0]*256)
    for x in data:
        occurences[x if isinstance(x, int) else ord(x)] += 1

    entropy = 0
    for x in occurences:
        if x:
            p_x = float(x) / len(data)
            entropy -= p_x*math.log(p_x, 2)

    return entropy

#Function to Extract Resources
def get_resources(pe):
    resources = []
    if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE'):
        try:
            for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
                if hasattr(resource_type, 'directory'):
                    for resource_id in resource_type.directory.entries:
                        if hasattr(resource_id, 'directory'):
                            for resource_lang in resource_id.directory.entries:
                                data = pe.get_data(resource_lang.data.struct.OffsetToData, resource_lang.data.struct.Size)
                                size = resource_lang.data.struct.Size
                                entropy = get_entropy(data)

                                resources.append([entropy, size])
        except Exception as e:
            return resources
    return resources


#Function to Get Info of each Resource
def get_version_info(pe):
    res = {}
    for fileinfo in pe.FileInfo:
        if fileinfo.Key == 'StringFileInfo':
            for st in fileinfo.StringTable:
                for entry in st.entries.items():
                    res[entry[0]] = entry[1]
        if fileinfo.Key == 'VarFileInfo':
            for var in fileinfo.Var:
                res[var.entry.items()[0][0]] = var.entry.items()[0][1]
    if hasattr(pe, 'VS_FIXEDFILEINFO'):
          res['flags'] = pe.VS_FIXEDFILEINFO.FileFlags
          res['os'] = pe.VS_FIXEDFILEINFO.FileOS
          res['type'] = pe.VS_FIXEDFILEINFO.FileType
          res['file_version'] = pe.VS_FIXEDFILEINFO.FileVersionLS
          res['product_version'] = pe.VS_FIXEDFILEINFO.ProductVersionLS
          res['signature'] = pe.VS_FIXEDFILEINFO.Signature
          res['struct_version'] = pe.VS_FIXEDFILEINFO.StrucVersion
    return res

#Function to Extract Infos
def extract_infos(fpath):
    res = {}
    pe = pefile.PE(fpath)
    res['Machine'] = pe.FILE_HEADER.Machine
    res['SizeOfOptionalHeader'] = pe.FILE_HEADER.SizeOfOptionalHeader
    res['Characteristics'] = pe.FILE_HEADER.Characteristics
    res['MajorLinkerVersion'] = pe.OPTIONAL_HEADER.MajorLinkerVersion
    res['MinorLinkerVersion'] = pe.OPTIONAL_HEADER.MinorLinkerVersion
    res['SizeOfCode'] = pe.OPTIONAL_HEADER.SizeOfCode
    res['SizeOfInitializedData'] = pe.OPTIONAL_HEADER.SizeOfInitializedData
    res['SizeOfUninitializedData'] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
    res['AddressOfEntryPoint'] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
    res['BaseOfCode'] = pe.OPTIONAL_HEADER.BaseOfCode
    try:
        res['BaseOfData'] = pe.OPTIONAL_HEADER.BaseOfData
    except AttributeError:
        res['BaseOfData'] = 0
    res['ImageBase'] = pe.OPTIONAL_HEADER.ImageBase
    res['SectionAlignment'] = pe.OPTIONAL_HEADER.SectionAlignment
    res['FileAlignment'] = pe.OPTIONAL_HEADER.FileAlignment
    res['MajorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
    res['MinorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
    res['MajorImageVersion'] = pe.OPTIONAL_HEADER.MajorImageVersion
    res['MinorImageVersion'] = pe.OPTIONAL_HEADER.MinorImageVersion
    res['MajorSubsystemVersion'] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
    res['MinorSubsystemVersion'] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
    res['SizeOfImage'] = pe.OPTIONAL_HEADER.SizeOfImage
    res['SizeOfHeaders'] = pe.OPTIONAL_HEADER.SizeOfHeaders
    res['CheckSum'] = pe.OPTIONAL_HEADER.CheckSum
    res['Subsystem'] = pe.OPTIONAL_HEADER.Subsystem
    res['DllCharacteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics
    res['SizeOfStackReserve'] = pe.OPTIONAL_HEADER.SizeOfStackReserve
    res['SizeOfStackCommit'] = pe.OPTIONAL_HEADER.SizeOfStackCommit
    res['SizeOfHeapReserve'] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
    res['SizeOfHeapCommit'] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
    res['LoaderFlags'] = pe.OPTIONAL_HEADER.LoaderFlags
    res['NumberOfRvaAndSizes'] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes

    # Sections
    res['SectionsNb'] = len(pe.sections)
    entropy = map(lambda x:x.get_entropy(), pe.sections)
    s=len(list(entropy))
    res['SectionsMeanEntropy'] = sum(entropy)/float(s)
    res['SectionsMinEntropy'] = min(entropy,default=0)
    res['SectionsMaxEntropy'] = max(entropy,default=0)
    raw_sizes = map(lambda x:x.SizeOfRawData, pe.sections)
    t=len(list(raw_sizes))
    res['SectionsMeanRawsize'] = sum(raw_sizes)/float(t)
    res['SectionsMinRawsize'] = min(raw_sizes,default=0)
    res['SectionsMaxRawsize'] = max(raw_sizes,default=0)
    virtual_sizes = map(lambda x:x.Misc_VirtualSize, pe.sections)
    
    u=len(list(virtual_sizes))
    res['SectionsMeanVirtualsize'] = sum(virtual_sizes)/float(u)
    res['SectionsMinVirtualsize'] = min(virtual_sizes,default=0)
    res['SectionMaxVirtualsize'] = max(virtual_sizes,default=0)

    #Imports
    try:
        res['ImportsNbDLL'] = len(pe.DIRECTORY_ENTRY_IMPORT)
        imports = sum([x.imports for x in pe.DIRECTORY_ENTRY_IMPORT], [])
        res['ImportsNb'] = len(imports)
        
        v=list(filter(lambda x:x.name is None, imports))
        res['ImportsNbOrdinal'] = len(v)
    except AttributeError:
        res['ImportsNbDLL'] = 0
        res['ImportsNb'] = 0
        res['ImportsNbOrdinal'] = 0

    #Exports
    try:
        res['ExportNb'] = len(pe.DIRECTORY_ENTRY_EXPORT.symbols)
    except AttributeError:
        # No export
        res['ExportNb'] = 0
    #Resources
    resources= get_resources(pe)
    res['ResourcesNb'] = len(resources)
    if len(resources)> 0:
        entropy = map(lambda x:x[0], resources)
        
        w=len(list(entropy))
        res['ResourcesMeanEntropy'] = sum(entropy)/float(w)
        res['ResourcesMinEntropy'] = min(entropy,default=0)
        res['ResourcesMaxEntropy'] = max(entropy,default=0)
        sizes = map(lambda x:x[1], resources)
        
        p=len(list(sizes))
        res['ResourcesMeanSize'] = sum(sizes)/float(p)
        res['ResourcesMinSize'] = min(sizes,default=0)
        res['ResourcesMaxSize'] = max(sizes,default=0)
    else:
        res['ResourcesNb'] = 0
        res['ResourcesMeanEntropy'] = 0
        res['ResourcesMinEntropy'] = 0
        res['ResourcesMaxEntropy'] = 0
        res['ResourcesMeanSize'] = 0
        res['ResourcesMinSize'] = 0
        res['ResourcesMaxSize'] = 0

    # Load configuration size
    try:
        res['LoadConfigurationSize'] = pe.DIRECTORY_ENTRY_LOAD_CONFIG.struct.Size
    except AttributeError:
        res['LoadConfigurationSize'] = 0


    # Version configuration size
    try:
        version_infos = get_version_info(pe)
        res['VersionInformationSize'] = len(version_infos.keys())
    except AttributeError:
        res['VersionInformationSize'] = 0
    return res


 
class ListBoxWidget(QListWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setAcceptDrops(True)
        self.resize(300,300)
 
    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls:
            event.accept()
        else:
            event.ignore()
 
    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.CopyAction)
            event.accept()
        else:
            event.ignore()
 
    def dropEvent(self, event):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.CopyAction)
            event.accept()
 
            links = []
            for url in event.mimeData().urls():
                # https://doc.qt.io/qt-5/qurl.html
                if url.isLocalFile():
                    links.append(str(url.toLocalFile()))
                else:
                    links.append(str(url.toString()))
            self.addItems(links)
        else:
            event.ignore()

class AppDemo(QMainWindow):
    def __init__(self):
        super().__init__()
        self.resize(800, 300)
        self.listbox_view = ListBoxWidget(self)
        self.setWindowTitle("Malware Detector Tool")
        
        

        self.btn = QPushButton('Paste Testing File Path', self)
        self.btn.setGeometry(450, 200, 200, 50)
        self.btn.clicked.connect(lambda: self.input_fpath())
    
    def input_fpath(self): 
        file_path,flag = QInputDialog.getText(self, "User Input","Enter File Path:")

         
        if file_path!='':
            msg = QMessageBox()
            msg.setWindowTitle("System Alert")
            msg.setText("Press OK and Please Wait!        ")
            msg.setIcon(QMessageBox.Information)
            msg.setStandardButtons(QMessageBox.Ok)
            msg.exec_()
                
            clf = joblib.load("classifier.pkl")
            features=pickle.loads(open("features.pkl",'rb').read())
            
            try:   
                data = extract_infos(file_path)
                pe_features = list(map(lambda x:data[x], features))
                res= clf.predict([pe_features])[0]
                ans=('%s - %s' %(os.path.basename(file_path),['MALICIOUS!', 'SAFE'][res])) 
                print(ans)

                toaster=win10toast.ToastNotifier()
                if(res==1):
                    toaster.show_toast('Malware Detector Tool',ans,duration=10,icon_path="Hopstarter-Malware-Patched.ico")
                else:
                    toaster.show_toast('Malware Detector Tool',ans,duration=10,icon_path="Hopstarter-Malware-Delete.ico")
            except:
                toas_error=win10toast.ToastNotifier()
                toas_error.show_toast('Malware Detector','Invalid FILE FORMAT',duration=10,icon_path="Oxygen-Icons.org-Oxygen-Actions-window-close.ico")

                


if __name__ == '__main__':
    app = QApplication(sys.argv)
    apl = AppDemo()
    l1 = QLabel(apl)
    l2 = QLabel(apl)
    l3 = QLabel(apl)
    l4 = QLabel(apl)
    l5 = QLabel(apl)
    l6 = QLabel(apl)
    l7 = QLabel(apl)
    l8 = QLabel(apl)
    l9 = QLabel(apl)
    
    l1.setText("Drop Testing File Here")
    l2.setText("Welcome to Malware Detector Tool")
    l3.setText("Follow the Steps below:-")
    l4.setText("Step 1 : Drop Files in the Drop Window")
    l5.setText("Step 2 : Copy the file path from the drop Window")
    l6.setText("Step 3 : Click on the button 'Paste Testing File Path'")
    l7.setText("Step 4 : Paste the file path in the dialogue box appeared and Click OK")
    l8.setText("Step 5 : Press OK and Wait for 2-5 sec. Windows Notifier will Display the Results")
    l9.setText("Note: This tool is made to test only PE (Portable Executable) Format Files")
    
    l1.adjustSize()
    l2.adjustSize()
    l3.adjustSize()
    l4.adjustSize()
    l5.adjustSize()
    l6.adjustSize()
    l7.adjustSize()
    l8.adjustSize()
    l9.adjustSize()
    
    l2.move(470,30)
    l1.move(100,120)
    l3.move(350,60)
    l4.move(350,80)
    l5.move(350,95)
    l6.move(350,110)
    l7.move(350,125)
    l8.move(350,140)
    l9.move(350,155)

    apl.show()
    sys.exit(app.exec_())
